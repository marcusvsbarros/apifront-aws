name: Build and Deploy React App

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      repo_name: ${{ steps.define_repo_name.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag caso não exista
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          else
            echo "Tag inicial já existe."
          fi

      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi

          echo "Última tag: $LAST_TAG"

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Commits:"
          echo "$COMMITS"

          MAJOR=0
          MINOR=0
          PATCH=0

          while IFS= read -r COMMIT; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done <<< "$COMMITS"

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION

          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" == "$NEW_VERSION" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_ENV
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Definir nome do repositório
        id: define_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Inserir versão no App.js
        if: steps.version.outputs.should_deploy == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          sed -i '/<\/Container>/i \
            <Row className="mt-3">\
              <Col>\
                <p style={{ textAlign: "center", fontStyle: "italic" }}>Versão: '"$NEW_VERSION"'</p>\
              </Col>\
            </Row>' src/App.js

      - name: Criar imagem Docker
        if: steps.version.outputs.should_deploy == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
          REPO_NAME: ${{ steps.define_repo_name.outputs.repo_name }}
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$NEW_VERSION .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$NEW_VERSION ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:latest

      - name: Push da imagem
        if: steps.version.outputs.should_deploy == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
          REPO_NAME: ${{ steps.define_repo_name.outputs.repo_name }}
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$NEW_VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:latest

      - name: Atualizar versão no package.json
        if: steps.version.outputs.should_deploy == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          npm version $NEW_VERSION --no-git-tag-version

      - name: Commit e push
        if: steps.version.outputs.should_deploy == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add package.json
          git commit -m "chore(release): version $NEW_VERSION"
          git tag v$NEW_VERSION
          git push origin main --tags

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            REPO_NAME="${{ needs.build.outputs.repo_name }}"
            VERSION="${{ needs.build.outputs.new_version }}"
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:$VERSION"

            sudo systemctl start docker || sudo service docker start

            docker rm -f $REPO_NAME || true
            docker rmi -f "$IMAGE" || true

            docker pull $IMAGE

            docker run -d -p 3000:80 --name $REPO_NAME $IMAGE
